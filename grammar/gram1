CHAR := [a-z]|[A-Z]
DIGIT := [0-9]
DIGITNO := [1-9]
IDENTIFIER := CHAR(CHAR|DIGIT)*
TYPE := (int | bool | string)([NUMBER])?

BASICPROC := afficher(EXPRSTRING)
BASICFUN := saisirEntier()
BASICFUN := intToString(EXPARITHMETIC)
BASICFUN := stringToInt(EXPSTRING)


PROGRAM := (FUNCTION|PROCEDURE)* algo IDENTIFIER DECLARATION* begin STATEMENT+ end
    FUNCTION := function TYPE IDENTIFIER(     (PARAM(,PARAM)*)?   ) DECLARATION* begin STATEMENT* return ACTION end
    PROCEDURE := proc IDENTIFIER(     (PARAM(,PARAM)*)?   ) DECLARATION* begin STATEMENT+ end
        PARAM := TYPE IDENTIFIER;

    DECLARATION := TYPE IDENTIFIER (, IDENTIFIER);

    STATEMENT := AFFECTATION | IFBLOC | LOOP | PROCCALL
        AFFECTATION := IDENTIFIER = OPERATION;
            OPERATION := EXPARITHMETIC | EXPLOGIC | EXPSTRING | FUNCALL | VARIABLE
                VARIABLE := IDENTIFIER([NUMBER])?
                STRINGPARAM := "(CHAR|DIGIT)*"
                FUNCALL := CALL | BASICFUN
                PROCCALL := CALL | BASICPROC;
                CALL := IDENTIFIER(  (OPERATION(,OPERATION)*)?  )
                EXPARITHMETIC := TERM ((+|-) TERM)*
                    TERM := UNARY ((*|/|%) UNARY)*
                    INTEGER := (-)? NUMBER
                    NUMBER := 0 | DIGITNO DIGIT*| (EXPARITHMETIC)| VARIABLE
                EXPLOGIC := EXPET (|| EXPET)*
                    EXPET := TERMLOG (&& TERMLOG)*
                    TERMLOG := ELEMENTLOG | !ELEMENTLOG
                    ELEMENTLOG := VALUELOG | OPERATION > OPERATION | OPERATION < OPERATION | OPERATION == OPERATION
                    VALUELOG := true | false | (EXPLOGIC) | VARIABLE
                EXPSTRING := VARIABLE | EXPSTRING. EXPSTRING | "(CHAR|DIGIT)*"
        IFBLOC := if (LOGICEXPRESSION) then STATEMENT+ ELSEBLOC endif
            ELSEBLOC := else STATEMENT+ | &
        LOOP := while (LOGICEXPRESSION) do STATEMENT+ endwhile
        LOOP := for NUMBER times do STATEMENT+ endfor
